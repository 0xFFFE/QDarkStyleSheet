[tox]

envlist =
  # Envs to build
  {win,lin,mac}-{py36,py37,py38}-{pyqt5,pyside2,pyqt4,pyside}-{build,test}
  # Envs for metrics and development
  {win,lin,mac}-{py38}-{lint,safety,metric,develop,doc,release}
  # Docs with screenshots
  {win,lin,mac}-{py38}-{pyqt5,pyside2}-{doc}

skip_missing_interpreters =
  true

[testenv]

platform =
  # platforms to run
  win: windows
  lin: linux
  mac: osx

deps =
  build: -rreq-stable.txt
  test: -rreq-test.txt
  lint: -rreq-test.txt
  safety: -rreq-test.txt
  metric: -rreq-test.txt
  develop: -rreq-develop.txt
  doc: -rreq-doc.txt
  release: -rreq-release.txt

  # basic dependencies for each env
  pyqt: pyqt4
  pyqt5: pyqt5
  pyside: pyside
  pyside2: pyside2

whitelist_externals =
  # non python dependencies
  qmake
  doc: make
  doc: latexpdf

changedir=
  doc: docs

commands =

  # BUILD ------------------------------------------------------------------

  # try generate build
  build: python setup.py sdist bdist_wheel
  # try install with pip
  build: pip install .
  # get some info
  build: python -m qdarkstyle --all
  # check depedencies
  build: pip check

  # need to run the interface to certify the build, run example
  pyqt: python example/example.py --qt_from=pyqt --test
  pyqt: python example/example.py --qt_from=pyqt --test --no_dark

  pyqt5: python example/example.py --qt_from=pyqt5 --test
  pyqt5: python example/example.py --qt_from=pyqt5 --test --no_dark

  pyside: python example/example.py --qt_from=pyside --test
  pyside: python example/example.py --qt_from=pyside --test --no_dark

  pyside2: python example/example.py --qt_from=pyside2 --test
  pyside2: python example/example.py --qt_from=pyside2 --test --no_dark

  # TEST -------------------------------------------------------------------

  # Those commands commented below correct style problems
  # DO NOT RUN ON SERVER, it is just to keep registry for local use
  # autopep8 --ignore=E501 --aggressive --aggressive --aggressive --experimental
  # docformatter -r -i --wrap-summaries=0 --wrap-descriptions=0 *.py
  # eradicate

  # Test and coverage
  # test: pytest-cov
  # test: pytest-qt
  # test: pytest
  test: pytest --cov "./test"

  # Code and docstring style check, running alone for now - pylama-#156
  # test: pylama -v --options="tox.ini" "{toxinidir}"

  # Code linting
  lint: pycodestyle --config="tox.ini" "."
  # lint: pyflakes "./qdarkstyle"
  # lint: mypy --config-file="tox.ini" "qdarkstyle"

  # Code and doc linting
  lint: pylint -r y --rcfile="pylint.ini" "./qdarkstyle" --disable="R1260,R0912"

  # Doc linting
  lint: pydocstyle --config="tox.ini" "."
  lint: doc8 --config="tox.ini" "."

  # Safety
  safety: safety check
  safety: bandit --recursive --skip=B301,B403 qdarkstyle

  # Code metrics
  metric: radon cc -a qdarkstyle --exclude="*/ui/*"
  metric: radon mi qdarkstyle --exclude="*/ui/*"
  metric: radon raw -s qdarkstyle --exclude="*/ui/*"
  metric: radon hal -f qdarkstyle --exclude="*/ui/*"

  # DOC (inside docs folder) ----------------------------------------------

  # Documentation - generate apidocs, build html, build latex, build pdf
  doc: sphinx-apidoc --private --separate --force --module-first -o "example" "../example" "../example/ui/*"
  doc: sphinx-apidoc --private --separate --force --module-first -o "reference" "../qdarkstyle"
  doc: sphinx-apidoc --private --separate --force --module-first -o "scripts" "../scripts"

  doc: python "../example/example.py" --screenshot
  doc: python "../example/example.py" --screenshot --no_dark

  doc: sphinx-build -b html -j auto -E -d "{toxworkdir}/../build/docs/doctrees" . "{toxworkdir}/../build/docs/html"

  # RELEASE -------------------------------------------------------------------------------
  # Try to use re-ver package
  release: python setup.py sdist bdist_wheel
  release: twine check dist/*
  # try upload in test platform before the oficial
  # release: twine upload --repository-url https://test.pypi.org/legacy/ dist/*
  # release: pip install --index-url https://test.pypi.org/simple/ pymr2
  # upload to oficial
  # release: twine upload dist/*
  # release: pip uninstall pymr2
  # release: pip install pymr2


usedevelop =
  develop: true


# PYCODESTYLE ################################################################

[pycodestyle]

ignore = E501,C0301
max-line-length = 150
statistics = True
count = True
exclude =
    .tox,.env,.venv,build,dist,tests,examples,ui,*.egg-info*,*cache*,.coverage,
    */.tox/*,*/.env/*,*/.venv/*,*/build/*,*/dist/*,*/tests/*,*/ui/*,*/*.egg*,
    */.*,*/.coverage,*/./venv/*,./venv,*/docs/*,docs,venv

# PYDOCSTYLE #################################################################

[pydocstyle]

ignore = D107,D202,D203,D213,D406,D407,D413
match-dir="[^\.].*,!(docs),!(venv)"

# DOC8 #######################################################################

[doc8]

extension = .rst
file-encoding = "utf-8"
ignore-path =
    .tox,.env,.venv,build,dist,tests,examples,ui,*.egg-info*,*cache*,.coverage,
    */.tox/*,*/.env/*,*/.venv/*,*/build/*,*/dist/*,*/tests/*,*/ui/*,*/*.egg*,
    */.*,*/.coverage,*/./venv/*,./venv

# PYLAMA #####################################################################

[pylama]

format = pylint
linters = pyflakes
skip =
    .tox,.env,.venv,build,dist,tests,examples,ui,*.egg-info*,*cache*,.coverage,
    */.tox/*,*/.env/*,*/.venv/*,*/build/*,*/dist/*,*/tests/*,*/ui/*,*/*.egg*,
    */.*,*/.coverage,*/./venv/*,./venv,venv

# MYPY #######################################################################

[mypy]
# general configuration

[mypy-numpy]
ignore_missing_imports = True

[mypy-qtpy]
ignore_missing_imports = True

[mypy-scipy]
ignore_missing_imports = True

[mypy-pint]
ignore_missing_imports = True

[mypy-pyqtgraph]
ignore_missing_imports = True

[mypy-spyder]
ignore_missing_imports = True

[mypy-networkx]
ignore_missing_imports = True

[mypy-qdarkstyle]
ignore_missing_imports = True

[mypy-jsonpickle]
ignore_missing_imports = True
